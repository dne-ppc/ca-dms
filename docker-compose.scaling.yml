# Docker Compose configuration for horizontal scaling - CA-DMS
# This configuration demonstrates horizontal scaling with multiple instances

version: '3.8'

services:
  # PostgreSQL Database Cluster (Primary + Replicas)
  postgres-primary:
    image: postgres:15-alpine
    container_name: ca-dms-postgres-primary
    environment:
      POSTGRES_DB: ca_dms
      POSTGRES_USER: ca_dms_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ca_dms_password}
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${REPLICATION_PASSWORD:-replicator_password}
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./docker/postgres/primary:/docker-entrypoint-initdb.d/
    ports:
      - "5432:5432"
    networks:
      - ca-dms-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ca_dms_user -d ca_dms"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    labels:
      - "service=postgres"
      - "role=primary"

  postgres-replica-1:
    image: postgres:15-alpine
    container_name: ca-dms-postgres-replica-1
    environment:
      POSTGRES_DB: ca_dms
      POSTGRES_USER: ca_dms_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ca_dms_password}
      PGUSER: postgres
    volumes:
      - postgres_replica1_data:/var/lib/postgresql/data
      - ./docker/postgres/replica:/docker-entrypoint-initdb.d/
    depends_on:
      postgres-primary:
        condition: service_healthy
    networks:
      - ca-dms-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ca_dms_user -d ca_dms"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    labels:
      - "service=postgres"
      - "role=replica"

  postgres-replica-2:
    image: postgres:15-alpine
    container_name: ca-dms-postgres-replica-2
    environment:
      POSTGRES_DB: ca_dms
      POSTGRES_USER: ca_dms_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ca_dms_password}
      PGUSER: postgres
    volumes:
      - postgres_replica2_data:/var/lib/postgresql/data
      - ./docker/postgres/replica:/docker-entrypoint-initdb.d/
    depends_on:
      postgres-primary:
        condition: service_healthy
    networks:
      - ca-dms-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ca_dms_user -d ca_dms"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    labels:
      - "service=postgres"
      - "role=replica"

  # Redis Cluster
  redis-1:
    image: redis:7-alpine
    container_name: ca-dms-redis-1
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-ca_dms_redis_password} --port 6379
    volumes:
      - redis1_data:/data
    networks:
      - ca-dms-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    labels:
      - "service=redis"
      - "instance=1"

  redis-2:
    image: redis:7-alpine
    container_name: ca-dms-redis-2
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-ca_dms_redis_password} --port 6379
    volumes:
      - redis2_data:/data
    networks:
      - ca-dms-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    labels:
      - "service=redis"
      - "instance=2"

  redis-3:
    image: redis:7-alpine
    container_name: ca-dms-redis-3
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-ca_dms_redis_password} --port 6379
    volumes:
      - redis3_data:/data
    networks:
      - ca-dms-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    labels:
      - "service=redis"
      - "instance=3"

  # Backend API Instances
  backend-1:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ca-dms-backend-1
    environment: &backend_env
      DATABASE_URL: postgresql://ca_dms_user:${POSTGRES_PASSWORD:-ca_dms_password}@postgres-primary:5432/ca_dms
      DATABASE_REPLICA_URLS: >
        postgresql://ca_dms_user:${POSTGRES_PASSWORD:-ca_dms_password}@postgres-replica-1:5432/ca_dms,
        postgresql://ca_dms_user:${POSTGRES_PASSWORD:-ca_dms_password}@postgres-replica-2:5432/ca_dms
      REDIS_URL: redis://:${REDIS_PASSWORD:-ca_dms_redis_password}@redis-1:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
      API_V1_STR: /api/v1
      PROJECT_NAME: CA-DMS
      INSTANCE_ID: backend-1
      SHARDING_ENABLED: "true"
    volumes:
      - backend1_uploads:/app/uploads
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-1:
        condition: service_healthy
    networks:
      - ca-dms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    labels:
      - "service=backend"
      - "instance=1"

  backend-2:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ca-dms-backend-2
    environment:
      <<: *backend_env
      REDIS_URL: redis://:${REDIS_PASSWORD:-ca_dms_redis_password}@redis-2:6379/0
      INSTANCE_ID: backend-2
    volumes:
      - backend2_uploads:/app/uploads
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-2:
        condition: service_healthy
    networks:
      - ca-dms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    labels:
      - "service=backend"
      - "instance=2"

  backend-3:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ca-dms-backend-3
    environment:
      <<: *backend_env
      REDIS_URL: redis://:${REDIS_PASSWORD:-ca_dms_redis_password}@redis-3:6379/0
      INSTANCE_ID: backend-3
    volumes:
      - backend3_uploads:/app/uploads
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-3:
        condition: service_healthy
    networks:
      - ca-dms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    labels:
      - "service=backend"
      - "instance=3"

  # Read-only Backend Instances (for read operations)
  backend-read-1:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ca-dms-backend-read-1
    environment:
      <<: *backend_env
      DATABASE_URL: postgresql://ca_dms_user:${POSTGRES_PASSWORD:-ca_dms_password}@postgres-replica-1:5432/ca_dms
      READ_ONLY_MODE: "true"
      INSTANCE_ID: backend-read-1
    volumes:
      - backend_read1_uploads:/app/uploads
    depends_on:
      postgres-replica-1:
        condition: service_healthy
      redis-1:
        condition: service_healthy
    networks:
      - ca-dms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    labels:
      - "service=backend"
      - "type=readonly"
      - "instance=1"

  backend-read-2:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ca-dms-backend-read-2
    environment:
      <<: *backend_env
      DATABASE_URL: postgresql://ca_dms_user:${POSTGRES_PASSWORD:-ca_dms_password}@postgres-replica-2:5432/ca_dms
      READ_ONLY_MODE: "true"
      INSTANCE_ID: backend-read-2
    volumes:
      - backend_read2_uploads:/app/uploads
    depends_on:
      postgres-replica-2:
        condition: service_healthy
      redis-2:
        condition: service_healthy
    networks:
      - ca-dms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    labels:
      - "service=backend"
      - "type=readonly"
      - "instance=2"

  # Frontend Instances
  frontend-1:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ca-dms-frontend-1
    environment:
      VITE_API_BASE_URL: http://nginx/api
      VITE_WS_BASE_URL: ws://nginx/ws
      INSTANCE_ID: frontend-1
    depends_on:
      - nginx
    networks:
      - ca-dms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    labels:
      - "service=frontend"
      - "instance=1"

  frontend-2:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ca-dms-frontend-2
    environment:
      VITE_API_BASE_URL: http://nginx/api
      VITE_WS_BASE_URL: ws://nginx/ws
      INSTANCE_ID: frontend-2
    depends_on:
      - nginx
    networks:
      - ca-dms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    labels:
      - "service=frontend"
      - "instance=2"

  frontend-3:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ca-dms-frontend-3
    environment:
      VITE_API_BASE_URL: http://nginx/api
      VITE_WS_BASE_URL: ws://nginx/ws
      INSTANCE_ID: frontend-3
    depends_on:
      - nginx
    networks:
      - ca-dms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    labels:
      - "service=frontend"
      - "instance=3"

  # Background Worker Instances
  worker-1:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ca-dms-worker-1
    command: ["python", "-m", "celery", "worker", "-A", "app.worker", "--loglevel=info", "--hostname=worker-1@%h"]
    environment:
      <<: *backend_env
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-ca_dms_redis_password}@redis-1:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-ca_dms_redis_password}@redis-1:6379/2
      WORKER_ID: worker-1
    volumes:
      - worker1_data:/app/worker_data
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-1:
        condition: service_healthy
    networks:
      - ca-dms-network
    restart: unless-stopped
    labels:
      - "service=worker"
      - "instance=1"

  worker-2:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ca-dms-worker-2
    command: ["python", "-m", "celery", "worker", "-A", "app.worker", "--loglevel=info", "--hostname=worker-2@%h"]
    environment:
      <<: *backend_env
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-ca_dms_redis_password}@redis-2:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-ca_dms_redis_password}@redis-2:6379/2
      WORKER_ID: worker-2
    volumes:
      - worker2_data:/app/worker_data
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-2:
        condition: service_healthy
    networks:
      - ca-dms-network
    restart: unless-stopped
    labels:
      - "service=worker"
      - "instance=2"

  # Enhanced Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: ca-dms-nginx-lb
    ports:
      - "80:80"
      - "443:443"
      - "8081:8081"  # Monitoring port
    volumes:
      - ./nginx/nginx-scaling.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend-1
      - backend-2
      - backend-3
      - backend-read-1
      - backend-read-2
      - frontend-1
      - frontend-2
      - frontend-3
    networks:
      - ca-dms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    labels:
      - "service=nginx"
      - "role=load_balancer"

  # Auto-scaling Controller
  autoscaler:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ca-dms-autoscaler
    command: ["python", "-m", "app.services.auto_scaling_service"]
    environment:
      <<: *backend_env
      AUTO_SCALING_ENABLED: "true"
      DOCKER_HOST: unix:///var/run/docker.sock
      SCALING_CHECK_INTERVAL: 30
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - autoscaler_data:/app/autoscaler_data
    depends_on:
      - postgres-primary
      - redis-1
      - nginx
    networks:
      - ca-dms-network
    restart: unless-stopped
    labels:
      - "service=autoscaler"

  # Monitoring and Observability
  prometheus:
    image: prom/prometheus:latest
    container_name: ca-dms-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - ca-dms-network
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: ca-dms-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - ca-dms-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  # Database volumes
  postgres_primary_data:
    driver: local
  postgres_replica1_data:
    driver: local
  postgres_replica2_data:
    driver: local

  # Redis volumes
  redis1_data:
    driver: local
  redis2_data:
    driver: local
  redis3_data:
    driver: local

  # Backend volumes
  backend1_uploads:
    driver: local
  backend2_uploads:
    driver: local
  backend3_uploads:
    driver: local
  backend_read1_uploads:
    driver: local
  backend_read2_uploads:
    driver: local

  # Worker volumes
  worker1_data:
    driver: local
  worker2_data:
    driver: local

  # Nginx volumes
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local

  # Service volumes
  autoscaler_data:
    driver: local

  # Monitoring volumes
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ca-dms-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16