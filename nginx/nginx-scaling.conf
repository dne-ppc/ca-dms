# Advanced Nginx Configuration for Horizontal Scaling - CA-DMS
# Optimized for high-traffic production environments with multiple backend instances

worker_processes auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Performance tuning
worker_cpu_affinity auto;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
    accept_mutex off;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging with additional metrics for monitoring
    log_format detailed '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       '"$http_x_forwarded_for" '
                       'rt=$request_time uct="$upstream_connect_time" '
                       'uht="$upstream_header_time" urt="$upstream_response_time" '
                       'upstream="$upstream_addr" '
                       'cache="$upstream_cache_status"';

    access_log /var/log/nginx/access.log detailed;

    # Performance optimizations
    sendfile on;
    sendfile_max_chunk 1m;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    server_tokens off;

    # Buffer sizes
    client_body_buffer_size 128k;
    client_max_body_size 100M;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;

    # Timeouts
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;

    # Gzip compression with optimal settings
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/json
        application/xml+rss
        application/atom+xml
        image/svg+xml
        text/comma-separated-values
        text/x-js
        application/x-font-ttf
        application/vnd.ms-fontobject
        font/opentype
        image/x-icon;
    gzip_disable "MSIE [1-6]\.";

    # Brotli compression (if module available)
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/plain text/css application/json application/javascript text/xml application/xml+rss text/javascript;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';" always;

    # Rate limiting zones - optimized for scaling
    limit_req_zone $binary_remote_addr zone=api:20m rate=20r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=2r/s;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=search:15m rate=10r/s;

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=per_ip:10m;
    limit_conn_zone $server_name zone=per_server:10m;

    # Upstream configurations for horizontal scaling

    # Backend API servers with enhanced load balancing
    upstream backend_api {
        least_conn;
        keepalive 32;
        keepalive_requests 1000;
        keepalive_timeout 60s;

        # Multiple backend instances
        server backend-1:8000 max_fails=3 fail_timeout=30s weight=1;
        server backend-2:8000 max_fails=3 fail_timeout=30s weight=1;
        server backend-3:8000 max_fails=3 fail_timeout=30s weight=1;
        server backend-4:8000 max_fails=3 fail_timeout=30s weight=1;

        # Backup server
        server backend-backup:8000 backup;
    }

    # Read-only backend servers for read operations
    upstream backend_readonly {
        least_conn;
        keepalive 16;

        server backend-read-1:8000 max_fails=2 fail_timeout=20s;
        server backend-read-2:8000 max_fails=2 fail_timeout=20s;
        server backend-read-3:8000 max_fails=2 fail_timeout=20s;
    }

    # Frontend servers
    upstream frontend_app {
        least_conn;
        keepalive 16;

        server frontend-1:8080 max_fails=3 fail_timeout=30s weight=1;
        server frontend-2:8080 max_fails=3 fail_timeout=30s weight=1;
        server frontend-3:8080 max_fails=3 fail_timeout=30s weight=1;
    }

    # Caching configuration
    proxy_cache_path /var/cache/nginx/api levels=1:2 keys_zone=api_cache:100m
                     max_size=1g inactive=60m use_temp_path=off;
    proxy_cache_path /var/cache/nginx/static levels=1:2 keys_zone=static_cache:50m
                     max_size=5g inactive=7d use_temp_path=off;

    # Map for routing read vs write operations
    map $request_method $backend_pool {
        default backend_api;
        GET     backend_readonly;
        HEAD    backend_readonly;
    }

    # Health check configuration
    upstream_conf_server_name;

    # HTTP to HTTPS redirect
    server {
        listen 80 default_server;
        server_name _;
        return 301 https://$host$request_uri;
    }

    # Main HTTPS server with scaling optimizations
    server {
        listen 443 ssl http2 default_server;
        server_name ca-dms.example.com;

        # SSL optimization for scaling
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/private.key;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:100m;
        ssl_session_tickets off;
        ssl_buffer_size 1400;

        # Modern SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # OCSP Stapling
        ssl_stapling on;
        ssl_stapling_verify on;

        # HSTS
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

        # Connection and rate limiting
        limit_conn per_ip 20;
        limit_conn per_server 1000;

        # API endpoints with intelligent routing
        location /api {
            # Route read operations to read-only backends
            set $target_backend backend_api;
            if ($request_method ~ ^(GET|HEAD)$) {
                set $target_backend backend_readonly;
            }

            limit_req zone=api burst=50 nodelay;

            # Caching for GET requests
            proxy_cache api_cache;
            proxy_cache_valid 200 302 5m;
            proxy_cache_valid 404 1m;
            proxy_cache_bypass $http_pragma $http_authorization;
            proxy_no_cache $http_pragma $http_authorization;
            proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
            proxy_cache_lock on;
            proxy_cache_lock_timeout 5s;

            # Enhanced proxy settings
            proxy_pass http://$target_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;

            # Optimized timeouts for scaling
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # Enhanced buffering
            proxy_buffering on;
            proxy_buffer_size 16k;
            proxy_buffers 64 16k;
            proxy_busy_buffers_size 256k;
        }

        # Search endpoint with separate rate limiting
        location /api/v1/search {
            limit_req zone=search burst=20 nodelay;

            proxy_pass http://backend_readonly;
            proxy_cache api_cache;
            proxy_cache_valid 200 10m;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # File upload endpoint with special handling
        location /api/v1/upload {
            limit_req zone=upload burst=10 nodelay;
            client_max_body_size 100M;
            client_body_timeout 60s;

            proxy_pass http://backend_api;
            proxy_request_buffering off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Authentication endpoints with strict rate limiting
        location /api/v1/auth {
            limit_req zone=login burst=5 nodelay;

            proxy_pass http://backend_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # No caching for auth endpoints
            proxy_no_cache 1;
            proxy_cache_bypass 1;
        }

        # WebSocket connections with sticky sessions
        location /ws {
            proxy_pass http://backend_api;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket specific configuration
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
            proxy_connect_timeout 10s;

            # Disable buffering for real-time communication
            proxy_buffering off;
        }

        # Frontend with static asset optimization
        location / {
            proxy_pass http://frontend_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Static asset caching
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|map)$ {
                proxy_pass http://frontend_app;
                proxy_cache static_cache;
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header X-Cache-Status $upstream_cache_status;

                # Compression for static assets
                gzip_static on;
            }

            # Service worker and manifest files
            location ~* \.(js|json)$ {
                if ($uri ~* "(sw\.js|manifest\.json)") {
                    expires 0;
                    add_header Cache-Control "no-cache, no-store, must-revalidate";
                }
            }
        }

        # Health checks with different backends
        location /health {
            access_log off;
            proxy_pass http://backend_api/health;
            proxy_connect_timeout 2s;
            proxy_read_timeout 2s;
        }

        location /health/readonly {
            access_log off;
            proxy_pass http://backend_readonly/health;
            proxy_connect_timeout 2s;
            proxy_read_timeout 2s;
        }

        # Nginx status for monitoring
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }

        # Security - block access to sensitive files
        location ~ /\.(ht|git|env|config) {
            deny all;
            return 404;
        }

        # Block common attack patterns
        location ~ /(wp-admin|wp-login|xmlrpc\.php|\.php) {
            deny all;
            return 404;
        }

        # Custom error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;

        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # Monitoring and metrics server (internal)
    server {
        listen 8081;
        server_name monitoring;
        access_log off;

        location /metrics {
            stub_status on;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            deny all;
        }

        location /upstream_status {
            # Custom upstream status endpoint
            return 200 "upstream status endpoint";
            add_header Content-Type text/plain;
        }
    }
}

# Stream module for TCP/UDP load balancing (if needed)
stream {
    # Database connection load balancing
    upstream postgres_cluster {
        least_conn;
        server postgres-1:5432 max_fails=3 fail_timeout=30s;
        server postgres-2:5432 max_fails=3 fail_timeout=30s;
        server postgres-3:5432 max_fails=3 fail_timeout=30s;
    }

    # Redis cluster load balancing
    upstream redis_cluster {
        least_conn;
        server redis-1:6379 max_fails=2 fail_timeout=20s;
        server redis-2:6379 max_fails=2 fail_timeout=20s;
        server redis-3:6379 max_fails=2 fail_timeout=20s;
    }

    # Uncomment if TCP load balancing is needed
    # server {
    #     listen 5432;
    #     proxy_pass postgres_cluster;
    #     proxy_timeout 3s;
    #     proxy_responses 1;
    # }
}