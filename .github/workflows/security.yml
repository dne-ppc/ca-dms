name: Security Scanning

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM
  workflow_dispatch:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Dependency Security Scanning
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install safety bandit semgrep
        
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run Python security checks
      run: |
        cd backend
        # Check for known vulnerabilities in dependencies
        safety check -r requirements.txt --json --output safety-report.json || true
        
        # Static analysis for security issues
        bandit -r app/ -f json -o bandit-report.json || true
        
        # Advanced static analysis
        semgrep --config=auto app/ --json --output=semgrep-report.json || true
        
    - name: Run Node.js security audit
      run: |
        cd frontend
        npm audit --audit-level=moderate --json > npm-audit.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          backend/safety-report.json
          backend/bandit-report.json
          backend/semgrep-report.json
          frontend/npm-audit.json
        retention-days: 30

  # Container Security Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Backend Docker image
      run: |
        cd backend
        docker build -t ca-dms-backend:scan .
        
    - name: Build Frontend Docker image
      run: |
        cd frontend
        docker build -t ca-dms-frontend:scan .
        
    - name: Run Trivy vulnerability scanner on Backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ca-dms-backend:scan'
        format: 'sarif'
        output: 'backend-trivy.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Run Trivy vulnerability scanner on Frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ca-dms-frontend:scan'
        format: 'sarif'
        output: 'frontend-trivy.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'backend-trivy.sarif'
        category: 'backend-container'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'frontend-trivy.sarif'
        category: 'frontend-container'
        
    - name: Run Docker Bench Security
      run: |
        docker run --rm --net host --pid host --userns host --cap-add audit_control \
          -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
          -v /etc:/etc:ro \
          -v /usr/bin/containerd:/usr/bin/containerd:ro \
          -v /usr/bin/runc:/usr/bin/runc:ro \
          -v /usr/lib/systemd:/usr/lib/systemd:ro \
          -v /var/lib:/var/lib:ro \
          -v /var/run/docker.sock:/var/run/docker.sock:ro \
          --label docker_bench_security \
          docker/docker-bench-security > docker-bench.txt || true
          
    - name: Upload Docker Bench results
      uses: actions/upload-artifact@v3
      with:
        name: docker-bench-security
        path: docker-bench.txt

  # Code Security Analysis
  code-analysis:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: 'javascript,python'
        queries: 'security-and-quality'
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: '/language:javascript,python'
        
    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'http://localhost:8000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
        allow_issue_writing: false
        fail_action: false
        
  # License Compliance
  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install license scanners
      run: |
        pip install pip-licenses licensecheck
        
    - name: Scan Python licenses
      run: |
        cd backend
        pip install -r requirements.txt
        pip-licenses --format=json --output-file=python-licenses.json
        licensecheck --zero
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install and scan Node.js licenses
      run: |
        cd frontend
        npm ci
        npm install -g license-checker
        license-checker --json --out node-licenses.json
        
    - name: Upload license reports
      uses: actions/upload-artifact@v3
      with:
        name: license-reports
        path: |
          backend/python-licenses.json
          frontend/node-licenses.json
          
  # Security Configuration Review
  config-review:
    name: Security Configuration Review
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for exposed secrets
      uses: trufflesecurity/trufflehog@v3.63.2-beta
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        
    - name: Scan for hardcoded secrets
      run: |
        # Install detect-secrets
        pip install detect-secrets
        
        # Scan for secrets
        detect-secrets scan --all-files \
          --exclude-files '\.git/.*' \
          --exclude-files '.*\.lock' \
          --exclude-files 'node_modules/.*' \
          --baseline .secrets.baseline
          
    - name: Check Docker configurations
      run: |
        # Check Dockerfile best practices
        docker run --rm -i hadolint/hadolint < backend/Dockerfile || true
        docker run --rm -i hadolint/hadolint < frontend/Dockerfile || true
        
    - name: Security headers check
      run: |
        # Install security headers checker
        npm install -g security-headers-check
        
        # This will be run against deployed application
        echo "Security headers will be checked post-deployment"
        
  # Generate Security Report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, code-analysis, license-scan, config-review]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate comprehensive security report
      run: |
        cat > security-report.md << 'EOF'
        # CA-DMS Security Scan Report
        
        **Scan Date:** $(date)
        **Repository:** ${{ github.repository }}
        **Branch:** ${{ github.ref_name }}
        **Commit:** ${{ github.sha }}
        
        ## Summary
        
        This report summarizes the security scanning results for the CA-DMS application.
        
        ## Scans Performed
        
        - ✅ **Dependency Vulnerability Scan** - Python (Safety) & Node.js (npm audit)
        - ✅ **Static Code Analysis** - Bandit, Semgrep, CodeQL
        - ✅ **Container Security Scan** - Trivy vulnerability scanner
        - ✅ **Docker Security Benchmark** - Docker Bench Security
        - ✅ **License Compliance** - License compatibility check
        - ✅ **Secret Detection** - TruffleHog, detect-secrets
        - ✅ **Configuration Review** - Dockerfile and security headers
        
        ## Findings
        
        ### Critical Issues
        - Review critical findings in the Security tab
        
        ### High Priority Items
        - Check uploaded artifacts for detailed reports
        
        ### Recommendations
        - Keep dependencies updated regularly
        - Follow security best practices in code
        - Implement proper secret management
        - Use security headers in production
        
        ## Artifacts Generated
        
        - Security scan reports
        - License compliance reports
        - Docker security benchmark
        - Code analysis results
        
        EOF
        
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md