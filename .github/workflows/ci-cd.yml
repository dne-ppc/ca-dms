name: CA-DMS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  # Backend Testing and Quality Checks
  backend-test:
    name: Backend Tests & Quality
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_ca_dms
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up test environment variables
      run: |
        cat > .env << EOF
        DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_ca_dms
        SECRET_KEY=test-secret-key-for-github-actions
        API_V1_STR=/api/v1
        PROJECT_NAME=CA-DMS Test
        SUPABASE_URL=https://test-supabase-url.supabase.co
        SUPABASE_ANON_KEY=test-anon-key
        EOF
        
    - name: Run database migrations
      run: |
        # Create database schema for testing
        python -c "
        from app.core.database import Base, engine
        Base.metadata.create_all(bind=engine)
        "
        
    - name: Run backend tests
      run: |
        PYTHONPATH=$PWD python -m pytest tests/ -v --tb=short
        
    - name: Run backend linting
      run: |
        pip install flake8 black isort
        flake8 app/ --max-line-length=100 --exclude=migrations
        black --check app/
        isort --check-only app/
        
    - name: Generate test coverage report
      run: |
        pip install pytest-cov
        PYTHONPATH=$PWD python -m pytest tests/ --cov=app --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        
  # Frontend Testing and Quality Checks  
  frontend-test:
    name: Frontend Tests & Quality
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run TypeScript type checking
      run: npx tsc -b
      
    - name: Run linting
      run: npm run lint
      
    - name: Run formatting check
      run: npm run format:check
      
    - name: Run unit tests
      run: npm run test -- --coverage
      
    - name: Build frontend
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/
        retention-days: 7
        
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Run E2E tests
      run: npm run test:e2e
      
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: javascript, python
        
    - name: Backend dependency security check
      run: |
        pip install safety
        cd backend && safety check -r requirements.txt --json
        
    - name: Frontend dependency security check
      run: |
        cd frontend && npm audit --audit-level=high

  # Build and Package
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/ca-dms-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/ca-dms-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/ca-dms-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/ca-dms-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration Tests (runs after build)
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run E2E Integration Tests
      working-directory: ./backend
      run: |
        PYTHONPATH=$PWD python -m pytest tests/test_e2e_document_lifecycle.py -v --tb=short
        
    - name: Generate integration test report
      if: always()
      working-directory: ./backend
      run: |
        PYTHONPATH=$PWD python -m pytest tests/test_e2e_document_lifecycle.py --junitxml=integration-results.xml
        
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: backend/integration-results.xml

  # Deployment (only on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging environment
      run: |
        echo "ðŸš€ Deploying to staging environment"
        echo "Backend image: ${{ secrets.DOCKER_USERNAME }}/ca-dms-backend:${{ github.sha }}"
        echo "Frontend image: ${{ secrets.DOCKER_USERNAME }}/ca-dms-frontend:${{ github.sha }}"
        # Add actual deployment commands here (e.g., kubectl, helm, docker-compose)
        
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production environment
      run: |
        echo "ðŸš€ Deploying to production environment"
        echo "Backend image: ${{ secrets.DOCKER_USERNAME }}/ca-dms-backend:${{ github.sha }}"
        echo "Frontend image: ${{ secrets.DOCKER_USERNAME }}/ca-dms-frontend:${{ github.sha }}"
        # Add actual deployment commands here
        
    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ðŸŽ‰ **CA-DMS Release v${{ github.run_number }}**
          
          **Changes in this release:**
          - Auto-generated release from main branch
          - All tests passing âœ…
          - Security scans completed âœ…
          - Integration tests validated âœ…
          
          **Docker Images:**
          - Backend: `${{ secrets.DOCKER_USERNAME }}/ca-dms-backend:${{ github.sha }}`
          - Frontend: `${{ secrets.DOCKER_USERNAME }}/ca-dms-frontend:${{ github.sha }}`
        draft: false
        prerelease: false